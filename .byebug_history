c
params[:twitter_bot][:tags]
c
@twitter_bot.tags
c
@twitter_bot.tags.map { |tag| tag.strip }.join(', ')
@twitter_bot.tags.join(', ')
params
@twitter_bot.tags
tags
c
params[:twitter_bot][:tags].split(',').map { |tag| tag.strip }
params[:twitter_bot][:tags].strip
params[:twitter_bot][:tags]
c
params
params[:twitter_bot][:tags]
params[:twitter_bot][:tags].split(',')
params[:twitter_bot][:tags].strip.split(',')
bot_params
c
bot_params
format
c
n
nn
n
backtrace
n
self.username
screen_name
local_user.new_record?
n
TwitterUser.where(twitter_id: twitter_id, twitter_client: self.id).first
n
tweet.user
tweet
num_to_retry
tweets
c
bot_params.merge(status: 1)
@bot.status
@bot
params
bot_params
c
params
c
params
bot_params
c
n
@bot
params
bot_params
c
n
bot_params
c
n
s
n
s
c
n
s
c
n
tweets.to_json
tweets.json
tweets.toJSON()
tweets.toJSON
tweets.find(:collection)
tweets['collection']
tweets.keys
tweets[@collection]
tweets.collection
tweets
i
local_user.new_record?
c
local_user.new_record?
c
local_user.new_record?
c
local_user.new_record?
c
local_user.new_record?
c
local_user.new_record?
c
local_user.new_record?
local_user
n
c
aa += 1
aa
aa += 1
aa++
aa = 0
tweets.attrs[:statuses].length
tweets = @client.search('#sex', count: 15)
tweets.attrs[:statuses].length
tweets = @client.search('sex')
@client.search('sex')
tweets.attrs[:statuses].length
tweets.attrs[:statuses]
tweets.attrs.keys
tweets.attrs[0]
tweets.attrs
tweets.statuses
tweets[:statuses]
tweets.keys
tweets.length
tweets.attrs.length
tweets.attrs
tweets.take(10)
@client.search('#sex')
tweets.take(10)
@client.search('#sex', count: 15)
tweets.take(10)
@client.search('sex', count: 15)
tweets.take(10)
tweets.take(num_to_follow)
@client.search('sex', count: 7)
num_to_follow
tweets.take(num_to_follow)
@client.search('sex', count: tweets_to_retrieve)
tweets.take(num_to_follow)
@client.search(tag, count: tweets_to_retrieve)
tweets.take(num_to_follow)
tweets
n
c
n
s
c
local_user
n
continue
c
kill
c
finish
disable breakpoints
disable
help
c
n
s
n
c
n
s
twitter_user
n
TwitterUser.where(twitter_id: user.id, twitter_client: self.id, follow_status: :following)
c
n
s
TwitterUser.where(twitter_id: user.id, twitter_client: self.id, follow_status: :following)
c
n
s
c
@client.friend_ids(self.username).each_slice(100)
@client.friend_ids(self.username)
@client
n
s
n
c
users_path
user_path
users
bot_path
root
path
root_path
n
s
n
c
help
skip
TwitterUser.where(twitter_client: self.id, follow_status: [:follower, :friend])
TwitterUsers.where(twitter_client: self.id, follow_status: [:follower, :friend])
s
n
c
require './'
require '../../../app/workers/scheduler.rb'
require '../../../app'
require '../../../app/workers'
n
c
n
c
File.expand_path('../../config/scheduler.yml', __FILE__)
YAML.load_file('../../config/scheduler.yml')
c
n
c
TwitterFollowWorker.new
TwitterFollowWorker
Twitter
c
n
c
TwitterFollowWorker
c
n
c
@client
c
n
self
config
@client
c
s
n
@client
n
s
n
params
n
c
n
s
n
@client.user
@client
@client.user
@client
n
s
n
c
@client.user
n
@client
@client.follower_ids.to_a
n
@client.user
@client
n
s
n
client.twitter_oauth_authorize_url
client
n
params
c
@twitter_bot.tags
