c
aa += 1
aa
aa += 1
aa++
aa = 0
tweets.attrs[:statuses].length
tweets = @client.search('#sex', count: 15)
tweets.attrs[:statuses].length
tweets = @client.search('sex')
@client.search('sex')
tweets.attrs[:statuses].length
tweets.attrs[:statuses]
tweets.attrs.keys
tweets.attrs[0]
tweets.attrs
tweets.statuses
tweets[:statuses]
tweets.keys
tweets.length
tweets.attrs.length
tweets.attrs
tweets.take(10)
@client.search('#sex')
tweets.take(10)
@client.search('#sex', count: 15)
tweets.take(10)
@client.search('sex', count: 15)
tweets.take(10)
tweets.take(num_to_follow)
@client.search('sex', count: 7)
num_to_follow
tweets.take(num_to_follow)
@client.search('sex', count: tweets_to_retrieve)
tweets.take(num_to_follow)
@client.search(tag, count: tweets_to_retrieve)
tweets.take(num_to_follow)
tweets
n
c
n
s
c
local_user
n
continue
c
kill
c
finish
disable breakpoints
disable
help
c
n
s
n
c
n
s
twitter_user
n
TwitterUser.where(twitter_id: user.id, twitter_client: self.id, follow_status: :following)
c
n
s
TwitterUser.where(twitter_id: user.id, twitter_client: self.id, follow_status: :following)
c
n
s
c
@client.friend_ids(self.username).each_slice(100)
@client.friend_ids(self.username)
@client
n
s
n
c
users_path
user_path
users
bot_path
root
path
root_path
n
s
n
c
help
skip
TwitterUser.where(twitter_client: self.id, follow_status: [:follower, :friend])
TwitterUsers.where(twitter_client: self.id, follow_status: [:follower, :friend])
s
n
c
require './'
require '../../../app/workers/scheduler.rb'
require '../../../app'
require '../../../app/workers'
n
c
n
c
File.expand_path('../../config/scheduler.yml', __FILE__)
YAML.load_file('../../config/scheduler.yml')
c
n
c
TwitterFollowWorker.new
TwitterFollowWorker
Twitter
c
n
c
TwitterFollowWorker
c
n
c
@client
c
n
self
config
@client
c
s
n
@client
n
s
n
params
n
c
n
s
n
@client.user
@client
@client.user
@client
n
s
n
c
@client.user
n
@client
@client.follower_ids.to_a
n
@client.user
@client
n
s
n
client.twitter_oauth_authorize_url
client
n
params
c
@twitter_bot.tags
@twitter_bot
c
bot_params
c
bot_params
c
bot_params
c
n
c
@twitter_bot.tags
@twitter_bot
params
c
n
c
n
c
n
c
params[:twitter_bot][:tags]
params
c
n
c
n
c
n
bot_params
params
c
params
c
n
c
@twitter_bot
@twitter_bots
params
c
bot_params
bot_params[:tags] = bot_params[:tags].split(',')
bot_params[:tags]
bot_params
n
c
bot_params['tags'].split
c
n
bot_params
c
bot_params['tags']
bot_params
c
@client.user.id
@client.user.screen_name
@client.user
client.user
@client.user_agent
@client.screen_name
@client.follower_ids
@client.username
@client.twitter_id
@client.id
self
@client
c
n
c
@child_bot.following.length
@child_bot.following
@child_bot
set_child_bot
c
params
@bots
bots
bot
@bot
self.twitter_bot
self
c
@child_bot
@bot.twitter_bot
@bot
c
current_user.bots[0].twitter_bots
current_user.bots[0].twitter_bot
current_user.bots[0]
current_user.bots
current_user
@bot.user
@bot
eval("@bot.#{@bot.platform.downcase}_bot")
eval(@bot."#{@bot.platform.downcase}_bot")
